name: Build / Test CLI & WebApp
on:
  pull_request:
  push:
    branches: ["main"]
env:
  FORCE_COLOR: 1
  ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}
  NODE_OPTIONS: "--no-deprecation"
  ALLOW_INDEXING: false
  LOG_LEVEL: debug
  ETH_NETWORK: "mainnet"
  DATABASE_URL: postgresql://user:password@localhost:5432/webapp
  L1_RPC_URL: ${{ secrets.TENDERLY_RPC_URL }}
  L2_RPC_URL: ${{ secrets.TENDERLY_RPC_URL }} # set to the same as l1 because it's good enough for this test.
  WALLET_CONNECT_PROJECT_ID: 00000000000000000000000000000000
  UPGRADE_HANDLER_ADDRESS: "0x9A6DE0f62Aa270A8bCB1e2610078650D539B1Ef9" # set to sepolia zkSync diamond just because it exists
  ZK_GOV_OPS_GOVERNOR_ADDRESS: "0x9A6DE0f62Aa270A8bCB1e2610078650D539B1Ef9" # set to sepolia zkSync diamond just because it exists
  ZK_TOKEN_GOVERNOR_ADDRESS: "0x9A6DE0f62Aa270A8bCB1e2610078650D539B1Ef9" # set to sepolia zkSync diamond just because it exists
  FORK_URL: ${{ secrets.TENDERLY_RPC_URL }}

jobs:
  cli-build-and-test:
    runs-on: ubuntu-latest
    env:
      FORCE_COLOR: 1
    defaults:
      run:
        working-directory: ./apps/cli
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "pnpm"
      - run: pnpm install
      - run: pnpm test:ci
      # - name: Coverage
      #   uses: romeovs/lcov-reporter-action@v0.3.1
      #   with:
      #     lcov-file: ./cli/coverage/lcov.info
      #     github-token: ${{ secrets.GITHUB_TOKEN }}

  webapp-start:
    runs-on: ubuntu-latest
    timeout-minutes: 2
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "pnpm"
      - run: |
          pnpm install
          pnpm build
      - name: Start DB
        run: |
          cd apps/web
          ./scripts/init_db.sh
          docker ps -a
          sleep 10
          pnpm db:migrate
      - name: Start WebApp
        run: |
          cd apps/web
          timeout 60s pnpm start &
          PID=$!
          sleep 20
          if ps -p $PID > /dev/null; then
            echo "WebApp started successfully"
            kill $PID
          else
            echo "WebApp failed to start"
            exit 1
          fi
  webapp-integration-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "pnpm"
      - run: pnpm install
      - run: pnpm build
      - name: Run integration tests
        run: |
          cd apps/web
          pnpm test:i

  webapp-unit-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "pnpm"
      - run: pnpm install
      - run: pnpm build
      - name: Run unit tests
        run: |
          cd apps/web
          pnpm test:u  # unit tests
          pnpm test:s  # server tests

  compile-contracts:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: "recursive"
      - uses: pnpm/action-setup@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "pnpm"
      - run: pnpm install
      - name: Run compile
        run: |
          cd packages/contracts
          pnpm build

  test-local:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./packages/contracts
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: "recursive"
      - uses: pnpm/action-setup@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "pnpm"
      - run: pnpm install
      - run: cp .env.example .env
      - run: pnpm env:up
      - run: pnpm deploy:setup
      - run: pnpm test:local
      - name: Stop local environment
        if: always()
        run:
          cat .hardhat.log && pnpm env:down

  docker-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          load: true
          tags: upgrade-checker:local
      - name: Verify Docker image
        run: |
          docker image inspect upgrade-checker:local
          if [ $? -ne 0 ]; then
            echo "Docker image build failed"
            exit 1
          fi
